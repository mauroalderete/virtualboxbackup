#!/bin/bash

# Name of the script
SCRIPT_NAME="virtualboxbackup"

# log function
# $1: message
# $2: level
log() {
    local message=$1
    local level=$2

    if [[ "$level" == "ERROR" ]]; then
        echo "$(date) [ERROR] $message" >&2
    else
        echo "$(date) [INFO] $message"
    fi
}


# Check if the output_dir exist and contains write permissions
directory_valid(){
    if [[ ! -d "$1" ]]; then
        log "The directory $1 doesn't exist" "ERROR"
        exit 1
    fi

    if [[ ! -w "$1" ]]; then
        log "The directory $1 doesn't have write permissions" "ERROR"
        exit 1
    fi
}

# Check if VBoxManage is installed
vboxmanage_exist(){
    if ! command -v VBoxManage &> /dev/null; then
        log "VBoxManage is not installed" "ERROR"
        exit 1
    fi
}

# Check if the virtual machine exist
vm_exist(){
    if ! VBoxManage list vms | grep -q "$1"; then
        log "The virtual machine $1 doesn't exist" "ERROR"
        exit 1
    fi
}

# Check if the virtual machine is running
vm_running(){
    if VBoxManage list runningvms | grep -q "$1"; then
        log "The virtual machine $1 is running" "ERROR"
        exit 1
    fi
}

# Function to execute a backup
virtualboxbackup__backup() {

    # Transform long options to short options
    for arg in "$@"; do
        shift
        case "$arg" in
        "--job") set -- "$@" "-j" ;;
        "--machine") set -- "$@" "-m" ;;
        "--directory") set -- "$@" "-d" ;;
        *) set -- "$@" "$arg" ;;
        esac
    done

    local job_name=""
    local vm_name=""
    local output_dir=""

    # Parse the options
    while getopts ":j:m:d:s:" opt; do
    case ${opt} in
        j )
            job_name="$OPTARG"
            ;;
        m )
            vm_name="$OPTARG"
            ;;
        d )
            output_dir="$OPTARG"
            ;;
        \? )
            log "Invalid option: $OPTARG" "ERROR"
            exit 1
            ;;
        : )
            log "Option $OPTARG require an argument" "ERROR"
            exit 1
            ;;
    esac
    done

    # Validate the options
    if [[ -z "$job_name" ]]; then
        log "Must indicate the job name" "ERROR"
        exit 1
    fi

    if [[ -z "$vm_name" ]]; then
        log "Must indicate the virtual machine name" "ERROR"
        exit 1
    fi

    if [[ -z "$output_dir" ]]; then
        log "Must indicate the backup directory" "ERROR"
        exit 1
    fi

    # Remove the last slash if exist
    output_dir=${output_dir%/}

    # Check if the output_dir exist and contains write permissions
    directory_valid "$output_dir"

    # Check if VBoxManage is installed
    vboxmanage_exist
    # Check if the virtual machine exist
    vm_exist "$vm_name"
    # Check if the virtual machine is running
    vm_running "$vm_name"
    
    # Create a filename with the current date and time
    filename="${job_name}_$(date +%Y%m%d_%H%M%S).ova"
    
    # Command to export the virtual machine
    VBoxManage export "$vm_name" -o "${output_dir}/${filename}"
}

# Function to schedule a backup
virtualboxbackup__schedule() {
    
    # Transform long options to short options
    for arg in "$@"; do
        shift
        case "$arg" in
        "--job") set -- "$@" "-j" ;;
        "--machine") set -- "$@" "-m" ;;
        "--directory") set -- "$@" "-d" ;;
        "--periodicity") set -- "$@" "-p" ;;
        *) set -- "$@" "$arg" ;;
        esac
    done

    local job_name=""
    local vm_name=""
    local output_dir=""
    local periodicity_value=""

    # Parse the options
    while getopts ":j:m:d:p:" opt; do
    case ${opt} in
        j )
            job_name="$OPTARG"
            ;;
        m )
            vm_name="$OPTARG"
            ;;
        d )
            output_dir="$OPTARG"
            ;;
        p )
            periodicity_value="$OPTARG"
            ;;
        \? )
            log "Invalid option: $OPTARG" "ERROR"
            exit 1
            ;;
        : )
            log "Option $OPTARG require an argument" "ERROR"
            exit 1
            ;;
    esac
    done

    # Validate the options
    if [[ -z "$job_name" ]]; then
        log "Must indicate the job name" "ERROR"
        exit 1
    fi

    if [[ -z "$vm_name" ]]; then
        log "Must indicate the virtual machine name" "ERROR"
        exit 1
    fi

    if [[ -z "$output_dir" ]]; then
        log "Must indicate the backup directory" "ERROR"
        exit 1
    fi

    if [[ -z "$periodicity_value" ]]; then
        log "Must indicate the periodicity in cronjob format" "ERROR"
        exit 1
    fi

    # Remove the last slash if exist
    output_dir=${output_dir%/}

    # Check if the output_dir exist and contains write permissions
    directory_valid "$output_dir"
    # Check if VBoxManage is installed
    vboxmanage_exist
    # Check if the virtual machine exist
    vm_exist "$vm_name"

    # Call the list function and save the output in a variable
    local list=$(virtualboxbackup__list)

    # Check if the channel name already exists in the list
    if echo "$list" | grep -q "$job_name"; then
        # Show an error message and end the subcommand
        log "The job $job_name already exist." "ERROR"
        return 2
    fi

    # Add the job to the crontab
    (crontab -l ; echo "$periodicity_value /usr/local/bin/${SCRIPT_NAME} backup -j $job_name -m $vm_name -d $output_dir") | crontab -
}

# Function to unschedule a backup
virtualboxbackup__unschedule() {

    # Transform long options to short options
    for arg in "$@"; do
        shift
        case "$arg" in
        "--job") set -- "$@" "-j" ;;
        *) set -- "$@" "$arg" ;;
        esac
    done

    local job_name=""

    # Parse the options
    while getopts ":j:m:d:p:" opt; do
    case ${opt} in
        j )
            job_name="$OPTARG"
            ;;
        \? )
            log "Invalid option: $OPTARG" "ERROR"
            exit 1
            ;;
        : )
            log "Option $OPTARG require an argument" "ERROR"
            exit 1
            ;;
    esac
    done

    # Validate the options
    if [[ -z "$job_name" ]]; then
        log "Must indicate the job name" "ERROR"
        exit 1
    fi

    # Call the list function and save the output in a variable
    local list=$(virtualboxbackup__list)

    # Check if the channel name doesn't exist in the list
    if ! echo "$list" | grep -q "$job_name"; then
        # Show an error message and end the subcommand
        log "The job $job_name doesn't exists." "ERROR"
        exit 1
    fi

    # Delete the job from the crontab
    crontab -l | grep -v "$SCRIPT_NAME backup -j $job_name" | crontab -
}

# Function to list the jobs
virtualboxbackup__list() {
    crontab -l | grep "$SCRIPT_NAME"
}

# Function to show a help message
virtualboxbackup__help() {
    echo "Usage: $SCRIPT_NAME <command> [options]

Commands:
    backup      Execute a backup of a virtual machine
        -j, --job           The name of the job
        -m, --machine       The name of the virtual machine
        -d, --directory     The directory to save the backup
        
    schedule    Schedule a backup job
        -j, --job           The name of the job
        -m, --machine       The name of the virtual machine
        -d, --directory     The directory to save the backup
        -p, --periodicity   The periodicity of the backup job in cronjob format
        
    unschedule  Unschedule a backup job
        -j, --job           The name of the job

    list        List all the scheduled backup jobs

    help        Show this help message
"
}

# Function to launch the subcommands
virtualboxbackup_launcher () {
    # save the first argument in a variable and delete it from the argument list
    local cmd=$1; shift
    # Verify if exists a function with the prefix "virtualboxbackup__" and the name of the subcommand
    if type "virtualboxbackup__$cmd" >/dev/null 2>&1; then
        # Execute the function of the subcommand with the remaining arguments
        "virtualboxbackup__$cmd" "$@"
    else
        # Show an error message and end the subcommand
        log "Subcommand $cmd unknown" "ERROR"
        exit 1
    fi
}

# If the script is invoked directly, call the launcher function with the passed arguments
# Verify if the script is being executed or only loaded
[[ $_ == $0 ]] && exit
# Call the launcher function with all the arguments
virtualboxbackup_launcher "$@"
